/* Problem description:
* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
*  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/


package Problem2

object Problem2 {
	


     def GenerateFibonacci(StartFirstNumber:Int, StartSecondNumber:Int, EndNumber:Int){
      
     var x1:List[Int] = List()
     var x2:List[Int] = List() 
     var a:Int = 0
     
     x1 = x1 :+ StartFirstNumber
     x1 = x1 :+ StartSecondNumber
     x2 = x2 :+ StartSecondNumber
     
     while((x1(x1.length-1)+x1(x1.length-2)) < EndNumber){
           a = (x1(x1.length-1)+x1(x1.length-2))
           x1 = x1 :+ (x1(x1.length-1)+x1(x1.length-2))
           if(bNumberEven(a)){
             x2 = x2 :+ a
           }    
     }
     
     println("Answer: "+x2.sum)

    }
    
    def bNumberEven(Number:Int) = if (Number % 2 == 0) true else false
	def main(args: Array[String]){
	  GenerateFibonacci(1,2,4000000)
	}

}